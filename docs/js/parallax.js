function initializeParallax(s){var e=s.querySelectorAll("*[parallax]");console.log(e);var a=[],t=!1;"none"==getComputedStyle(document.body).transform&&(document.body.style.transform="translateZ(0)");var o=document.createElement("div");o.style.position="fixed",o.style.top="0",o.style.width="1px",o.style.height="1px",o.style.zIndex="1",document.body.insertBefore(o,document.body.firstChild);for(var r=0;r<e.length;r++){var l=e[r],n=l.parentNode;if("visible"==getComputedStyle(n).overflow){s&&n.parentNode!=s&&console.warn("Currently we only track a single overflow clip, but elements from multiple clips found.",l);var i,s=n.parentNode;"visible"==getComputedStyle(s).overflow&&console.error("Parent of sticky container should be scrollable element",l),t||getComputedStyle(s).webkitOverflowScrolling?(t=!0,i=n):(i=s,n.style.transformStyle="preserve-3d"),i.style.perspectiveOrigin="bottom right",i.style.perspective="1px",t&&(l.style.position="-webkit-sticky"),t&&(l.style.top="0"),l.style.transformOrigin="bottom right";for(var p=e[r].previousElementSibling;p&&p.hasAttribute("parallax");)p=p.previousElementSibling;for(var d=e[r].nextElementSibling;d&&!d.hasAttribute("parallax-cover");)d=d.nextElementSibling;a.push({node:e[r],top:e[r].offsetTop,sticky:!!t,nextCover:d,previousCover:p})}else console.error("Need non-scrollable container to apply perspective for",l,n)}s.addEventListener("scroll",function(){for(var e=0;e<a.length;e++){var t=a[e].node.parentNode,o=a[e].previousCover,r=a[e].nextCover,l=o?o.offsetTop+o.offsetHeight:0,n=r?r.offsetTop:t.offsetHeight,i=(l-200-s.clientHeight<s.scrollTop&&s.scrollTop,"block");a[e].node.style.display!=i&&(a[e].node.style.display=i)}}),window.addEventListener("resize",onResize.bind(null,a)),onResize(a);for(r=0;r<e.length;r++)e[r].parentNode.insertBefore(e[r],e[r].parentNode.firstChild)}function onResize(e){for(var t=0;t<e.length;t++){var o=e[t].node.parentNode,r=o.parentNode,l=e[t].previousCover,n=e[t].nextCover,i=e[t].node.getAttribute("parallax"),s=l?l.offsetTop+l.offsetHeight:0,a=e[t].sticky?0:r.offsetWidth-r.clientWidth,p=(e[t].sticky,e[t].node.offsetHeight),d=0;d=i?1-1/i:(p-(n?n.offsetTop:o.offsetHeight)+s)/(p-r.clientHeight),e[t].sticky&&(d=1/d);var f=1/(1-d),c=a*(f-1),v=e[t].sticky?-(r.scrollHeight-s-p)*(1-f):(s-d*(p-r.clientHeight))*f;e[t].node.style.transform="scale("+(1-d)+") translate3d("+c+"px, "+v+"px, "+d+"px)"}}
//# sourceMappingURL=parallax.js.map
